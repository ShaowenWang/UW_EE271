module pipe_picker (clk, rst, pattern);

				
		input logic clk, rst;
		output logic [15:0] pattern; // from 0 (top) to 14 (bottom)
		
		logic [3:0] num_pattern;

		
		random pipe_rand (.clk, .rst, .rand_num(num_pattern));
		
			always_ff @ (posedge clk) begin
					if (rst) begin
							pattern 	<= '0;
							
					end
					else begin
					
							
							
							if (num_pattern == 4'b0000) begin
											pattern <= 16'b1111111110000001;
							
							end else if(num_pattern == 4'b1000) begin
												
												pattern <= 16'b1111000000111111;
												
							
							end else if(num_pattern == 4'b1100) begin
												
												pattern <= 16'b1111111100000011;
												
												
							end else if(num_pattern == 4'b1110) begin
											
											   pattern <= 16'b1000000111111111;
							
							end else if(num_pattern == 4'b0111) begin
							
												pattern <= 16'b1111000000011111;
							
							end else if(num_pattern == 4'b1011) begin
							
												pattern <= 16'b1111111000000011;
							
							end else if(num_pattern == 4'b1101) begin
							
												pattern <= 16'b1111000000001111;

							
							end else if(num_pattern == 4'b0110) begin
							
												pattern <= 16'b1100000000111111;
							
							end else if(num_pattern == 4'b0011) begin
							
												pattern <= 16'b1000011110000000;
							
							end else if(num_pattern == 4'b1001) begin
							
												pattern <= 16'b0000000001111001;

							
							end else if(num_pattern == 4'b0100) begin
							
												pattern <= 16'b0000000011111111;
							
							end else if(num_pattern == 4'b1010) begin
							
												pattern <= 16'b1111111000000000;
							
							end else if(num_pattern == 4'b0101) begin
							
												pattern <= 16'b1001111100000000;
							
							end else if(num_pattern == 4'b0010) begin
							
												pattern <= 16'b0000001111100001;
														
							end else begin
							
												pattern <= 16'b10111000000110000;

							
							end
							
			
				  end
			end
endmodule





module pipe_picker_testbench();
	logic clk, rst;
	logic [15:0] pattern;
	logic [3:0] num_pattern;
	

	 pipe_picker dut (.clk, .rst, .pattern);
	
	 
				// Set up a simulated clock.
				parameter CLOCK_PERIOD=100;
				initial begin
							clk <= 0;
							forever #(CLOCK_PERIOD/2) clk <= ~clk; // Forever toggle the clock
				end

				initial begin
																				@(posedge clk); 
			rst <= 1;  														@(posedge clk); 		// Always reset at start
			rst <= 0;									  repeat(50) 	@(posedge clk); 		// Test case 1
																				@(posedge clk); 

				 $stop; // End the simulation.
				end
endmodule
